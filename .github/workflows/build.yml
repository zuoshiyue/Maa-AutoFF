name: Build AutoFF Executable

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        architecture: 'x64'

    - name: Install Python dependencies with retry
      uses: nick-fields/retry@v2
      with:
        max_attempts: 3
        retry_on: error
        timeout_minutes: 15
        command: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Create resources directory
      run: |
        if (-not (Test-Path -Path "res")) {
          New-Item -ItemType Directory -Path "res"
          Write-Output "创建资源目录: res"
        }
        # 创建bin目录如果不存在
        if (-not (Test-Path -Path "res/bin")) {
          New-Item -ItemType Directory -Path "res/bin"
          Write-Output "创建资源目录: res/bin"
        }

    - name: Build executable with Nuitka
      id: nuitka_build
      env:
        NUITKA_DOWNLOAD_GCC: "yes"
        NUITKA_CACHE_DIR: "${{ github.workspace }}\\.nuitka_cache"
      run: |
        # 显示环境变量以帮助调试
        Write-Output "当前环境变量:"
        Get-ChildItem Env:
        
        # 设置缓存目录
        if (-not (Test-Path -Path "${{ github.workspace }}\.nuitka_cache")) {
          New-Item -ItemType Directory -Path "${{ github.workspace }}\.nuitka_cache"
          Write-Output "创建Nuitka缓存目录"
        }
        
        # 执行打包脚本
        Write-Output "开始执行Nuitka打包..."
        python scripts/pack.py
        
        # 保存GCC版本信息
        Get-Command gcc -ErrorAction SilentlyContinue | Format-List | Out-File -FilePath "gcc_version.txt" -Encoding utf8
      continue-on-error: true  # 允许Nuitka打包失败时继续执行
    
    - name: Fallback to PyInstaller if Nuitka failed
      if: steps.nuitka_build.outcome == 'failure'
      run: |
        Write-Output "警告: Nuitka打包失败，尝试使用PyInstaller作为备选打包方案..."
        pip install pyinstaller
        python scripts/pack_pyinstaller.py

    - name: Verify build output
      run: |
        Write-Output "验证构建输出..."
        
        # 检查输出目录是否存在
        if (-not (Test-Path -Path "out")) {
          Write-Error "构建失败: 输出目录out不存在"
          exit 1
        }
        
        # 检查dist目录是否存在
        if (-not (Test-Path -Path "out/AutoFF.dist")) {
          Write-Error "构建失败: 输出目录out/AutoFF.dist不存在"
          exit 1
        }
        
        # 检查主exe文件是否存在
        if (-not (Test-Path -Path "out/AutoFF.dist/AutoFF.exe")) {
          Write-Error "构建失败: 未找到输出的AutoFF.exe文件"
          
          # 列出out目录内容以帮助调试
          Write-Output "out目录内容:"
          Get-ChildItem -Path "out" -Recurse | Format-List
          
          exit 1
        }
        
        # 检查关键依赖文件是否打包成功
        $frontendExists = Test-Path -Path "out/AutoFF.dist/frontend/dist/index.html"
        $webviewExists = Test-Path -Path "out/AutoFF.dist/webview/js"
        $rapidocrExists = Test-Path -Path "out/AutoFF.dist/rapidocr/models"
        
        Write-Output "构建验证成功: 找到AutoFF.exe文件"
        Write-Output "前端文件验证: $($frontendExists ? '成功' : '失败')"
        Write-Output "Webview JS验证: $($webviewExists ? '成功' : '失败')"
        Write-Output "RapidOCR模型验证: $($rapidocrExists ? '成功' : '失败')"
        
        # 只有当所有关键文件都存在时才继续
        if (-not $frontendExists -or -not $webviewExists -or -not $rapidocrExists) {
          Write-Error "构建验证失败: 缺少关键依赖文件"
          exit 1
        }

    - name: Bump version and push tag
      id: tag_version
      if: github.event_name != 'pull_request'  # 只在push或手动触发时执行版本更新
      uses: mathieudutour/github-tag-action@v6.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        default_bump: patch
        dry_run: ${{ github.event_name == 'pull_request' }}

    - name: Create Release
      id: create_release
      if: github.event_name != 'pull_request'  # 只在push或手动触发时创建Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_version.outputs.new_tag }}
        release_name: Release ${{ steps.tag_version.outputs.new_tag }}
        body: |
          ## AutoFF 更新内容
          ${{ steps.tag_version.outputs.changelog }}
          
          ### 发布信息
          - 构建时间: ${{ github.event.head_commit.timestamp }}
          - 提交信息: ${{ github.event.head_commit.message }}
          - 提交作者: ${{ github.event.head_commit.author.name }}
          - 构建环境: Windows Server 2022
          - Python版本: 3.10
          - 构建编号: ${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      if: github.event_name != 'pull_request'  # 只在push或手动触发时上传Release资产
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: out/AutoFF.dist/AutoFF.exe
        asset_name: AutoFF.exe
        asset_content_type: application/octet-stream

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: AutoFF-build
        path: out/AutoFF.dist
        retention-days: 14